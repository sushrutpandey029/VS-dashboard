{{>header}}
{{>sidebar}}
<div class="page-wrapper">
  <div class="content">

                <div class="row">
                    <div class="col-md-8 col-sm-8 col-lg-8 col-xl-4">
                        <div class="dash-widget">
							<span class="dash-widget-bg1"><i class="fa fa-stethoscope" aria-hidden="true"></i></span>
							<div class="dash-widget-info text-right">
								<h3>{{docData.length}}</h3>
								<span class="widget-title1">Doctors <i class="fa fa-check" aria-hidden="true"></i></span>
							</div>
                        </div>
                    </div>
                    <div class="col-md-8 col-sm-8 col-lg-8 col-xl-4">
                        <div class="dash-widget">
                            <span class="dash-widget-bg2"><i class="fa fa-user-o"></i></span>
                            <div class="dash-widget-info text-right">
                                <h3>{{patientdata.length}}</h3>
                                <span class="widget-title2">Patients <i class="fa fa-check" aria-hidden="true"></i></span>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-8 col-sm-8 col-lg-8 col-xl-4">
                        <div class="dash-widget">
                            <span class="dash-widget-bg3"><i class="fa fa-user-md" aria-hidden="true"></i></span>
                            <div class="dash-widget-info text-right">
                                <h3>{{gameData.length}}</h3>
                                <span class="widget-title3">Games<i class="fa fa-check" aria-hidden="true"></i></span>
                            </div>
                        </div>
                    </div>
                    
                    {{!-- <div class="col-md-6 col-sm-6 col-lg-6 col-xl-3">
                        <div class="dash-widget">
                            <span class="dash-widget-bg4"><i class="fa fa-heartbeat" aria-hidden="true"></i></span>
                            <div class="dash-widget-info text-right">
                                <h3>618</h3>
                                <span class="widget-title4">Pending <i class="fa fa-check" aria-hidden="true"></i></span>
                            </div>
                        </div>
                    </div> --}}
                </div>


                {{!-- graph --}}
				<div class="row">
					<div class="col-12 col-md-6 col-lg-6 col-xl-6">
						<div class="card">
							<div class="card-body">
								<div class="chart-title">
									<center><b><h4>Doctors graph</h4></b></center>
								
								</div>	
								    <canvas id="pmyChart" style="width:100%"></canvas>
               <button onClick="timeFrame('day')" >Day</button>
              <button onclick="timeFrame('month')">Month</button>
              <button onclick="timeFrame('year')" >Year</button>
              <input onchange="filterData()" defaultValue={new Date(Date.now() - 31 * 24 * 60 * 60 * 1000).getFullYear() + "-" + (new Date(Date.now()- 31 * 24 * 60 * 60 * 1000).getMonth() + 1) + "-" + new Date(Date.now() - 31 * 24 * 60 * 60 * 1000).getDate()} type="date" id="startdate" value="">
               <input onchange="filterData()" defaultValue={new Date(Date.now()).getFullYear() + "-" + (new Date(Date.now()).getMonth()+1) + "-" + new Date(Date.now()).getDate()} type="date" id="enddate" value="">     
               
               <select id='date-dropdown'>
                <option>Select M's/Y</option>
               </select>
              </div>
						</div>
					</div>

					<div class="col-12 col-md-6 col-lg-6 col-xl-6">
						<div class="card">
							<div class="card-body">
								<div class="chart-title">
								<center><b><h4>Patients graph</h4></b></center>
								</div>	
								 <canvas id="myChartp" style="width:100%;max-width:600px"></canvas>
                 <button onClick="timeFramep('day')" >Day</button>
                 <button onclick="timeFramep('month')">Month</button>
                 <button onclick="timeFramep('year')" >Year</button>
                <input onchange="filterDatap()" type="date" id="startdatep" value="">
               <input onchange="filterDatap()" type="date" id="enddatep" value="">     
							</div>
						</div>
					</div>
				</div>

        <script type="text/javascript" src="https://cdn.jsdelivr.net/npm/chart.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns/dist/chartjs-adapter-date-fns.bundle.min.js"></script>



<script>
  let dateDropdown = document.getElementById('date-dropdown'); 
       
  let currentYear = new Date().getFullYear();    
  let earliestYear = 2020;     
  while (currentYear >= earliestYear) {      
    let dateOption = document.createElement('option');          
    dateOption.text = currentYear;      
    dateOption.value = currentYear;        
    dateDropdown.add(dateOption);      
    currentYear -= 1;    
  }
</script> 

{{!-- doc graph --}}

       <script  myvar={{graphDataDoc}}>

          var unique = (a,t={}) => a.filter(e=>!(t[e]=e in t)); // function to find unique dates
          var tempd = document.currentScript.getAttribute('myvar'); 
          var arrd=tempd.split(","); // spliting from iso date to normal date
          var datapointsd=[];
          var curr=1;
         for(var i=1;i<arrd.length;i++){ //counting occurance of each element
            if(arrd[i-1]===arrd[i]){
              ++curr;
            }else{
              datapointsd.push(curr);
              curr=1;
            }
         }
         const counts = {};
         for (const num of arrd) {
                counts[num] = counts[num] ? counts[num] + 1 : 1;
              }

          datapointsd.push(curr);

          console.log(datapointsd);
          
          arrd=unique(arrd);
          var dayd=[];
          var mpo=new Map();

          for(var i=0;i<arrd.length;i++){
             dayd.push({x:Date.parse(arrd[i]),y:datapointsd[i]});
             mpo[arrd[i]]=mpo[arrd[i]] || [];
             mpo.set(arrd[i],datapointsd[i]);
          }
        
          var data = {
            labels: arrd,
            datasets: [{
              label: 'Doctors',
              data: dayd,
              backgroundColor: "skyblue",
              borderColor: "blue",
              borderWidth: 3
            }]
          };
          var config = {
            type: 'line',
            data:data,
            options: {
              responsive: true,
              scales: {
                x:{
                  type: 'time',
                  time:{
                    unit: 'month'
                  }
                },
                y: {
                  beginAtZero: true,
                  ticks: {
                    precision: 0,
                }
                }
              },
            }
          };
          const myChart = new Chart(
            document.getElementById('pmyChart'),
            config
          );

          function timeFrame(period){
            if(period=='day'){
            var startdate=document.getElementById('startdate');
            var enddate=document.getElementById('enddate');
            var temp = new Date(startdate.value)
            enddate = new Date(enddate.value)
            
              var labels = []
             while (temp <= enddate) {
                let day = temp.getDate();
                let month = temp.getMonth()+1;
                let year = temp.getFullYear();
              if(day<=9){
                 day= day.toString().padStart(2, '0');
                } if(month<=9){
                  month=month.toString().padStart(2,'0');
                }
                  labels.push(year + "-" + month + "-" + day)
                  temp = new Date(temp.getTime() + 24 * 60 * 60 * 1000)
              }

              var dayn=[];

       

            for(var i=0;i<labels.length;i++){

              if(mpo.has(labels[i])){
                dayn.push({x:Date.parse(labels[i]),y:counts[labels[i]]}) 
              }else{
                dayn.push({x:Date.parse(labels[i]),y:0});
              }
              } 
              myChart.config.options.scales.x.time.unit=period;
              myChart.config.options.scales.x.type="time";
              myChart.config.data.labels=label; 
              myChart.config.data.datasets[0].data=dayn;
            }else if(period=='month'){
              var selectYear=document.getElementById('date-dropdown');
              
              var label = ["January", "February", "March", "April", "May", "June", 
              "July","August", "September", "October","November", "December"];

              var data=new Array(12).fill(0);

              for(var i=0;i<arrd.length;i++){
                  let date=new Date(arrd[i]);
                  let month = date.getMonth();
                let year = date.getFullYear().toString();
                if(year==selectYear.value){
                  data[month]++;
                }
              }
              var dayn=[];
              for(let i=0;i<12;i++){
                dayn.push({x:label[i],y:data[i]});
              }

              myChart.config.options.scales.x.time.unit=period;
              myChart.config.options.scales.x.type="category";
              myChart.config.data.labels=label; 
              myChart.config.data.datasets[0].data=dayn;
             
            }else if(period=='year'){
              var startdate=document.getElementById('startdate');
              var enddate=document.getElementById('enddate');
              startdate = new Date(startdate.value)
              enddate = new Date(enddate.value)
              
              var syear=startdate.getFullYear();
              var eyear=enddate.getFullYear();

              var dif=eyear-syear+1;
              var data=new Array(dif).fill(0);

              var label = []
              for(var i=syear;i<=eyear;i++){
                label.push(i);
              }
              for(var i=0;i<arrd.length;i++){
                let date=new Date(arrd[i]);
                let temp=date.getFullYear();
                data[temp-syear]++;
              }
              var dayn=[];
              for(var i=0;i<label.length;i++){
                dayn.push({x:label[i],y:data[i]});
              }
              myChart.config.options.scales.x.time.unit=period;
              myChart.config.options.scales.x.type="category";
              myChart.config.data.labels=label; 
              myChart.config.data.datasets[0].data=dayn;
            }
            myChart.update();
          }

          </script>


         <!-- //paitent chart -->


				  <script myvar={{graphDataPatient}}>
              
          var unique = (a,t={}) => a.filter(e=>!(t[e]=e in t)); // function to find unique dates
          var temp = document.currentScript.getAttribute('myvar'); 
          var arr2=temp.split(","); // spliting from iso date to normal date
         var datapoints=[];
          var curr=1;
         for(var i=1;i<arr2.length;i++){ //counting occurance of each element
            if(arr2[i-1]===arr2[i]){
              ++curr;
            }else{
              datapoints.push(curr);
              curr=1;
            }
         }
          datapoints.push(curr);
          arr2=unique(arr2);
          const dayp=[];
          for(var i=0;i<arr2.length;i++){
             dayp.push({x:Date.parse(arr2[i]),y:datapoints[i]});
          }
          var data = {
            labels: arr2,
            datasets: [{
              label: 'Patients',
              data: dayp,
              backgroundColor: "lightgreen",
              borderColor: "green",
              borderWidth: 3
            }]
          };
          var config = {
            type: 'line',
            data,
            options: {
              scales: {
                x:{
                  type: 'time',
                  time:{
                    unit: 'day'
                  }
                },
                y: {
                  beginAtZero: true,
                   ticks: {
                    precision: 0
                }
                }
              }
            }
          };
          const myChartp = new Chart(
            document.getElementById('myChartp'),
            config
          );

          function timeFramep(period){

            if(period=='day'){
              myChartp.config.options.scales.x.time.unit=period;
              myChartp.config.data.datasets[0].data=dayp;
            }else if(period=='month'){
              myChartp.config.options.scales.x.time.unit=period;
              myChartp.config.data.datasets[0].data=dayp;
            }else if(period=='year'){
              myChartp.config.options.scales.x.time.unit=period;
              myChartp.config.data.datasets[0].data=dayp;
            }
            myChartp.update();
          }

          function filterDatap(){
            var dates2=[...arr2];
            const startdate=document.getElementById('startdatep');
            const enddate=document.getElementById('enddatep');
           var indexstartdate=dates2.findIndex(function(date) {
                            return date >=startdate.value;
                        });
          
          var indexenddate;
          for(var i=0;i<dates2.length;i++){
            if(dates2[i]<=enddate.value){
              indexenddate=i;
            }
          }
           const filterDate= dates2.slice(indexstartdate,indexenddate+1);
            myChartp.config.data.labels=filterDate;
            var datapoints2=[...datapoints]
            const filterDatapoints=datapoints2.slice(indexstartdate,indexenddate+1);
            myChartp.config.data.datasets[0].data=filterDatapoints;

            myChartp.update();
       
          }
        </script>




        {{!-- new patients --}}

         {{!-- <script  myvar={{graphDataDoc}}>

          var unique = (a,t={}) => a.filter(e=>!(t[e]=e in t)); // function to find unique dates
          var tempd = document.currentScript.getAttribute('myvar'); 
          var arrd=tempd.split(","); // spliting from iso date to normal date
          var datapointsd=[];
          var curr=1;
         for(var i=1;i<arrd.length;i++){ //counting occurance of each element
            if(arrd[i-1]===arrd[i]){
              ++curr;
            }else{
              datapointsd.push(curr);
              curr=1;
            }
         }
         const counts = {};
         for (const num of arrd) {
                counts[num] = counts[num] ? counts[num] + 1 : 1;
              }

          datapointsd.push(curr);

          console.log(datapointsd);
          
          arrd=unique(arrd);
          var dayd=[];
          var mpo=new Map();

          for(var i=0;i<arrd.length;i++){
             dayd.push({x:Date.parse(arrd[i]),y:datapointsd[i]});
             mpo[arrd[i]]=mpo[arrd[i]] || [];
             mpo.set(arrd[i],datapointsd[i]);
          }
        
          var data = {
            labels: arrd,
            datasets: [{
              label: 'Doctors',
              data: dayd,
              backgroundColor: "skyblue",
              borderColor: "blue",
              borderWidth: 3
            }]
          };
          var config = {
            type: 'line',
            data:data,
            options: {
              responsive: true,
              scales: {
                x:{
                  type: 'time',
                  time:{
                    unit: 'month'
                  }
                },
                y: {
                  beginAtZero: true,
                  ticks: {
                    precision: 0,
                }
                }
              },
            }
          };
          const myChart = new Chart(
            document.getElementById('myChartp'),
            config
          );

          function timeFrame(period){
            if(period=='day'){
            var startdate=document.getElementById('startdate');
            var enddate=document.getElementById('enddate');
            var temp = new Date(startdate.value)
            enddate = new Date(enddate.value)
            
              var labels = []
              while (temp <= enddate) {
                let day = temp.getDate();
                let month = temp.getMonth()+1;
                let year = temp.getFullYear();
                  labels.push(year + "-" + month + "-" + day)
                  temp = new Date(temp.getTime() + 24 * 60 * 60 * 1000)
              }

              var dayn=[];

       

            for(var i=0;i<labels.length;i++){
              
              if(mpo.has(labels[i])){
                dayn.push({x:Date.parse(labels[i]),y:counts[labels[i]]}) 
              }else{
                dayn.push({x:Date.parse(labels[i]),y:0});
              }
              } 
              myChart.config.options.scales.x.time.unit=period;
              myChart.config.options.scales.x.type="time";
              myChart.config.data.labels=label; 
              myChart.config.data.datasets[0].data=dayn;
            }else if(period=='month'){
              var selectYear=document.getElementById('date-dropdown');
              
              var label = ["January", "February", "March", "April", "May", "June", 
              "July","August", "September", "October","November", "December"];

              var data=new Array(12).fill(0);

              for(var i=0;i<arrd.length;i++){
                  let date=new Date(arrd[i]);
                  let month = date.getMonth();
                let year = date.getFullYear().toString();
                if(year==selectYear.value){
                  data[month]++;
                }
              }
              var dayn=[];
              for(let i=0;i<12;i++){
                dayn.push({x:label[i],y:data[i]});
              }

              myChart.config.options.scales.x.time.unit=period;
              myChart.config.options.scales.x.type="category";
              myChart.config.data.labels=label; 
              myChart.config.data.datasets[0].data=dayn;
             
            }else if(period=='year'){
              var startdate=document.getElementById('startdate');
            var enddate=document.getElementById('enddate');
            var temp = new Date(startdate.value)
            enddate = new Date(enddate.value)
            
              var labels = []


              myChart.config.options.scales.x.time.unit=period;
              myChart.config.data.datasets[0].data=dayd;
            }
            myChart.update();
          }

          function filterData(){
            var dates2=[...arrd];
            const startdate=document.getElementById('startdate');
            const enddate=document.getElementById('enddate');
           const indexstartdate=dates2.findIndex(function(date) {
                            return date >=startdate.value;
                        });
           var indexenddate;
          for(var i=0;i<dates2.length;i++){
            if(dates2[i]<=enddate.value){
              indexenddate=i;
            }
          }
           const filterDate= dates2.slice(indexstartdate,indexenddate+1);
            myChart.config.data.labels=filterDate;
            var datapoints2=[...datapointsd]
            const filterDatapoints=datapoints2.slice(indexstartdate,indexenddate+1);
            myChart.config.data.datasets[0].data=filterDatapoints;

            myChart.update();
       
          }

          </script> --}}
			

      {{!-- list of patient --}}
			
				<div class="row">
					<div class="col-12">
						<div class="card">
							<div class="card-header">
								<center><b><h4 class="">Recent Patient </h4></b></center>
							</div>
							<div class="card-block">
								<div class="table-responsive">
									<table class="table mb-0 new-patient-table">
                       <thead>
									<tr>
										<th>Image/Name</th>
										{{!-- <th>Age</th> --}}
										<th>Doctor ID</th>
										<th>Patient Email</th>
										<th>Patient Phone</th>
										<th class="text-right">Profile</th>
									</tr>
								</thead>
										 {{#each patientdata}}
										<tbody>
											<tr>
												<td>
													<a  href="user_detailprofile/{{this._id}}"><img width="28" height="28" class="rounded-circle" src="img/user.jpg" alt=""> 
													<h2>{{this.patientFullName}}</h2></a>
												</td>
                        <td><a  href="doc_detail_profile/{{this.DocId}}">{{this.DocId}}</a></td>
												<td>{{this.email}}</td>
												<td>{{this.phone}}</td>
                         <td><form action="../patients-profile/{{this._id}}">
                                              <button type="submit" class="btn btn-primary btn-primary-one float-right">Profile</button>
                                                    </form></td>
												{{!-- <td><button class="btn btn-primary btn-primary-one float-right">{{this.disabalityType}}</button></td> --}}
											</tr>
									
										</tbody>
										 {{/each}}
									</table>
								</div>
							</div>
						</div>
					</div>

					<div class="col-12">
						<div class="card">
							<div class="card-header">
							<center><b><h4 class="">Recent Doctors </h4></b></center>
							</div>
							<div class="card-block">
								<div class="table-responsive">
									<table class="table mb-0 new-patient-table">
                    <thead>
									<tr>
										<th>Image/Name</th>
										{{!-- <th>DocId</th> --}}
										{{!-- <th></th> --}}
										<th>Doc Email</th>
										<th>Doc Phone</th>
										<th class="text-right">Doc Dashboard</th>
									</tr>
								</thead>
										 {{#each docData}}
										<tbody>
											<tr>
												<td>
													<img width="28" height="28" class="rounded-circle" src="img/user.jpg" alt=""> 
													<h2><a  href="doc_detail_profile/{{this._id}}">{{this.fullname}}</a></h2>
                         
												</td>
                        	{{!-- <td>{{this._id}}</td> --}}
												<td>{{this.email}}</td>
												<td>{{this.phone}}</td>
												<td><button class="btn btn-primary btn-primary-one float-right"><a  href="doc-dashboard/{{this._id}}">Dashboard</a></button></td>
                        <td></td>
											</tr>
									
										</tbody>
										 {{/each}}
									</table>
								</div>
							</div>
						</div>
					</div>

					<div class="col-12">
						<div class="card">
							<div class="card-header">
								<center><b><h4 class="">Recent Games </h4></b></center>
							</div>
							<div class="card-block">
								<div class="table-responsive">
									<table class="table mb-0 new-patient-table">
                    <th>Image/Name</th>
										<th>Game Type</th>
										{{!-- <th></th> --}}
										<th>Game Category</th>
							
										 {{#each gameData}}
										<tbody>
											<tr>
												<td>
													<img width="28" height="28" class="rounded-circle" src="{{this.gameimage}}" alt=""> 
													
													<h2>{{this.gamename}}</h2>
												</td>
												<td>{{this.gametype}}</td>
												<td>{{this.gamecategories}}</td>
											</tr>
										</tbody>
										 {{/each}}
									</table>
								</div>
							</div>
						</div>
					</div>
				</div>


         {{!-- <div class="col-12">
                        <div class="card member-panel">
							<div class="card-header bg-white">
								<h4 class="card-title mb-0">Recent Doctors</h4>
							</div>
                            <div class="card-body">
                                <ul class="contact-list">
                                    <li>
                                        <div class="contact-cont">
                                            <div class="float-left user-img m-r-10">
                                                <a href="profile.html" title="John Doe"><img src="assets/img/user.jpg" alt="" class="w-40 rounded-circle"><span class="status online"></span></a>
                                            </div>
                                            <div class="contact-info">
                                                <span class="contact-name text-ellipsis">John Doe</span>
                                                <span class="contact-date">MBBS, MD</span>
                                            </div>
                                        </div>
                                    </li>
                                </ul>
                            </div>
                            <div class="card-footer text-center bg-white">
                                <a href="#" class="text-muted">View all Doctors</a>
                            </div>
                        </div>
                    </div> --}}
				





            </div>
            
  </div>
</div>
{{>footer}}